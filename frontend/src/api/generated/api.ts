/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActiveRequest
 */
export interface ActiveRequest {
    /**
     * アクティブトークン
     * @type {string}
     * @memberof ActiveRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AuthLoginRequest
 */
export interface AuthLoginRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof AuthLoginRequest
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof AuthLoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthSignUpRequest
 */
export interface AuthSignUpRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof AuthSignUpRequest
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof AuthSignUpRequest
     */
    'password': string;
    /**
     * ハンドルネーム
     * @type {string}
     * @memberof AuthSignUpRequest
     */
    'name': string;
    /**
     * スクリーンネーム
     * @type {string}
     * @memberof AuthSignUpRequest
     */
    'screenName': string;
}
/**
 * 
 * @export
 * @interface CheckIns
 */
export interface CheckIns {
    /**
     * 
     * @type {number}
     * @memberof CheckIns
     */
    'id': number;
    /**
     * 
     * @type {Users}
     * @memberof CheckIns
     */
    'user': Users;
    /**
     * 
     * @type {ParkingRoads}
     * @memberof CheckIns
     */
    'parkingRoad': ParkingRoads;
    /**
     * 
     * @type {string}
     * @memberof CheckIns
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CheckIns
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ClosePostRequest
 */
export interface ClosePostRequest {
    /**
     * 道路ID
     * @type {number}
     * @memberof ClosePostRequest
     */
    'parkingRoadId': number;
    /**
     * 閉鎖ステータスID
     * @type {number}
     * @memberof ClosePostRequest
     */
    'closeStatusId': number;
}
/**
 * 
 * @export
 * @interface CloseStatusLists
 */
export interface CloseStatusLists {
    /**
     * 閉鎖状況のリスト
     * @type {{ [key: string]: any; }}
     * @memberof CloseStatusLists
     */
    'list': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface CloseStatuses
 */
export interface CloseStatuses {
    /**
     * 
     * @type {number}
     * @memberof CloseStatuses
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'statusJpName': string;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'colorCode': string;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'group': string;
    /**
     * 
     * @type {Array<Closes>}
     * @memberof CloseStatuses
     */
    'close': Array<Closes>;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CloseStatuses
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface Closes
 */
export interface Closes {
    /**
     * 
     * @type {number}
     * @memberof Closes
     */
    'id': number;
    /**
     * 
     * @type {CloseStatuses}
     * @memberof Closes
     */
    'closeStatus': CloseStatuses;
    /**
     * 
     * @type {ParkingRoads}
     * @memberof Closes
     */
    'parkingRoad': ParkingRoads;
    /**
     * 
     * @type {Users}
     * @memberof Closes
     */
    'user': Users;
    /**
     * 
     * @type {string}
     * @memberof Closes
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Closes
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface Contacts
 */
export interface Contacts {
    /**
     * Primary key
     * @type {number}
     * @memberof Contacts
     */
    'id': number;
    /**
     * 
     * @type {Users}
     * @memberof Contacts
     */
    'user': Users;
    /**
     * 問い合わせ内容
     * @type {string}
     * @memberof Contacts
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface CreateContactRequest
 */
export interface CreateContactRequest {
    /**
     * 問い合わせ内容
     * @type {string}
     * @memberof CreateContactRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface EmailDto
 */
export interface EmailDto {
    /**
     * メールアドレス
     * @type {string}
     * @memberof EmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GetCurrentParkingRequest
 */
export interface GetCurrentParkingRequest {
    /**
     * 経度
     * @type {number}
     * @memberof GetCurrentParkingRequest
     */
    'latitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof GetCurrentParkingRequest
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface GetUserHereRequest
 */
export interface GetUserHereRequest {
    /**
     * パーキング道路ID
     * @type {number}
     * @memberof GetUserHereRequest
     */
    'parkingRoadId': number;
}
/**
 * 
 * @export
 * @interface JwtToken
 */
export interface JwtToken {
    /**
     * JWTトークン
     * @type {string}
     * @memberof JwtToken
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ParkingRoads
 */
export interface ParkingRoads {
    /**
     * 
     * @type {number}
     * @memberof ParkingRoads
     */
    'id': number;
    /**
     * 
     * @type {Parkings}
     * @memberof ParkingRoads
     */
    'parking': Parkings;
    /**
     * 
     * @type {string}
     * @memberof ParkingRoads
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ParkingRoads
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ParkingRoads
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<CheckIns>}
     * @memberof ParkingRoads
     */
    'checkIns': Array<CheckIns>;
    /**
     * 
     * @type {Array<Closes>}
     * @memberof ParkingRoads
     */
    'closes': Array<Closes>;
}
/**
 * 
 * @export
 * @interface Parkings
 */
export interface Parkings {
    /**
     * 
     * @type {number}
     * @memberof Parkings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Parkings
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Parkings
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Parkings
     */
    'longitude': number;
    /**
     * 
     * @type {number}
     * @memberof Parkings
     */
    'radius': number;
    /**
     * 
     * @type {Array<ParkingRoads>}
     * @memberof Parkings
     */
    'parkingRoads': Array<ParkingRoads>;
    /**
     * 
     * @type {Array<Closes>}
     * @memberof Parkings
     */
    'close': Array<Closes>;
    /**
     * 
     * @type {string}
     * @memberof Parkings
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Parkings
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface PasswordResetSetRequest
 */
export interface PasswordResetSetRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof PasswordResetSetRequest
     */
    'password': string;
    /**
     * リセットトークン
     * @type {string}
     * @memberof PasswordResetSetRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface PostCheckInRequest
 */
export interface PostCheckInRequest {
    /**
     * 経度
     * @type {number}
     * @memberof PostCheckInRequest
     */
    'latitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof PostCheckInRequest
     */
    'longitude': number;
    /**
     * 道路ID
     * @type {number}
     * @memberof PostCheckInRequest
     */
    'roadId': number;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {number}
     * @memberof Users
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'screenName': string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Users
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Users
     */
    'checkIns': Array<string>;
    /**
     * 
     * @type {Array<Closes>}
     * @memberof Users
     */
    'close': Array<Closes>;
    /**
     * 
     * @type {Array<Contacts>}
     * @memberof Users
     */
    'contacts': Array<Contacts>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サインイン後アドレス認証を行う
         * @summary 
         * @param {ActiveRequest} activeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        active: async (activeRequest: ActiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'activeRequest' is not null or undefined
            assertParamExists('active', 'activeRequest', activeRequest)
            const localVarPath = `/api/auth/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログインする
         * @summary 
         * @param {AuthLoginRequest} authLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authLoginRequest: AuthLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLoginRequest' is not null or undefined
            assertParamExists('login', 'authLoginRequest', authLoginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザ情報を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワードリセットを要求する
         * @summary 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetRequest: async (emailDto: EmailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailDto' is not null or undefined
            assertParamExists('passwordResetRequest', 'emailDto', emailDto)
            const localVarPath = `/api/auth/password-reset/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パスワードリセットを行う
         * @summary 
         * @param {PasswordResetSetRequest} passwordResetSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetSet: async (passwordResetSetRequest: PasswordResetSetRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetSetRequest' is not null or undefined
            assertParamExists('passwordResetSet', 'passwordResetSetRequest', passwordResetSetRequest)
            const localVarPath = `/api/auth/password-reset/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetSetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サインアップする
         * @summary 
         * @param {AuthSignUpRequest} authSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (authSignUpRequest: AuthSignUpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignUpRequest' is not null or undefined
            assertParamExists('signup', 'authSignUpRequest', authSignUpRequest)
            const localVarPath = `/api/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * サインイン後アドレス認証を行う
         * @summary 
         * @param {ActiveRequest} activeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async active(activeRequest: ActiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.active(activeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.active']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ログインする
         * @summary 
         * @param {AuthLoginRequest} authLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authLoginRequest: AuthLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ユーザ情報を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async me(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.me']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワードリセットを要求する
         * @summary 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordResetRequest(emailDto: EmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordResetRequest(emailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.passwordResetRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パスワードリセットを行う
         * @summary 
         * @param {PasswordResetSetRequest} passwordResetSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passwordResetSet(passwordResetSetRequest: PasswordResetSetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passwordResetSet(passwordResetSetRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.passwordResetSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * サインアップする
         * @summary 
         * @param {AuthSignUpRequest} authSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(authSignUpRequest: AuthSignUpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(authSignUpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * サインイン後アドレス認証を行う
         * @summary 
         * @param {ActiveRequest} activeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        active(activeRequest: ActiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtToken> {
            return localVarFp.active(activeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ログインする
         * @summary 
         * @param {AuthLoginRequest} authLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authLoginRequest: AuthLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtToken> {
            return localVarFp.login(authLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザ情報を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me(options?: RawAxiosRequestConfig): AxiosPromise<Users> {
            return localVarFp.me(options).then((request) => request(axios, basePath));
        },
        /**
         * パスワードリセットを要求する
         * @summary 
         * @param {EmailDto} emailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetRequest(emailDto: EmailDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.passwordResetRequest(emailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * パスワードリセットを行う
         * @summary 
         * @param {PasswordResetSetRequest} passwordResetSetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passwordResetSet(passwordResetSetRequest: PasswordResetSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JwtToken> {
            return localVarFp.passwordResetSet(passwordResetSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * サインアップする
         * @summary 
         * @param {AuthSignUpRequest} authSignUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(authSignUpRequest: AuthSignUpRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.signup(authSignUpRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * サインイン後アドレス認証を行う
     * @summary 
     * @param {ActiveRequest} activeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public active(activeRequest: ActiveRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).active(activeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログインする
     * @summary 
     * @param {AuthLoginRequest} authLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(authLoginRequest: AuthLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(authLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザ情報を取得する
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public me(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).me(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワードリセットを要求する
     * @summary 
     * @param {EmailDto} emailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passwordResetRequest(emailDto: EmailDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).passwordResetRequest(emailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パスワードリセットを行う
     * @summary 
     * @param {PasswordResetSetRequest} passwordResetSetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public passwordResetSet(passwordResetSetRequest: PasswordResetSetRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).passwordResetSet(passwordResetSetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サインアップする
     * @summary 
     * @param {AuthSignUpRequest} authSignUpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signup(authSignUpRequest: AuthSignUpRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signup(authSignUpRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CheckInApi - axios parameter creator
 * @export
 */
export const CheckInApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * チェックインする
         * @summary 
         * @param {PostCheckInRequest} postCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn: async (postCheckInRequest: PostCheckInRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCheckInRequest' is not null or undefined
            assertParamExists('checkIn', 'postCheckInRequest', postCheckInRequest)
            const localVarPath = `/api/check-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCheckInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 現在地のパーキングの情報を取得する
         * @summary 
         * @param {GetCurrentParkingRequest} getCurrentParkingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentParking: async (getCurrentParkingRequest: GetCurrentParkingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getCurrentParkingRequest' is not null or undefined
            assertParamExists('getCurrentParking', 'getCurrentParkingRequest', getCurrentParkingRequest)
            const localVarPath = `/api/check-in/get-current-parking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getCurrentParkingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パーキングにいるユーザを取得する
         * @summary 
         * @param {GetUserHereRequest} getUserHereRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHere: async (getUserHereRequest: GetUserHereRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getUserHereRequest' is not null or undefined
            assertParamExists('getUserHere', 'getUserHereRequest', getUserHereRequest)
            const localVarPath = `/api/check-in/get-user-here`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getUserHereRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckInApi - functional programming interface
 * @export
 */
export const CheckInApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckInApiAxiosParamCreator(configuration)
    return {
        /**
         * チェックインする
         * @summary 
         * @param {PostCheckInRequest} postCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIn(postCheckInRequest: PostCheckInRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingRoads>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIn(postCheckInRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckInApi.checkIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 現在地のパーキングの情報を取得する
         * @summary 
         * @param {GetCurrentParkingRequest} getCurrentParkingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentParking(getCurrentParkingRequest: GetCurrentParkingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Parkings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentParking(getCurrentParkingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckInApi.getCurrentParking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * パーキングにいるユーザを取得する
         * @summary 
         * @param {GetUserHereRequest} getUserHereRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHere(getUserHereRequest: GetUserHereRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Users>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHere(getUserHereRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckInApi.getUserHere']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CheckInApi - factory interface
 * @export
 */
export const CheckInApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckInApiFp(configuration)
    return {
        /**
         * チェックインする
         * @summary 
         * @param {PostCheckInRequest} postCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(postCheckInRequest: PostCheckInRequest, options?: RawAxiosRequestConfig): AxiosPromise<ParkingRoads> {
            return localVarFp.checkIn(postCheckInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 現在地のパーキングの情報を取得する
         * @summary 
         * @param {GetCurrentParkingRequest} getCurrentParkingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentParking(getCurrentParkingRequest: GetCurrentParkingRequest, options?: RawAxiosRequestConfig): AxiosPromise<Parkings> {
            return localVarFp.getCurrentParking(getCurrentParkingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * パーキングにいるユーザを取得する
         * @summary 
         * @param {GetUserHereRequest} getUserHereRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHere(getUserHereRequest: GetUserHereRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Users>> {
            return localVarFp.getUserHere(getUserHereRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckInApi - object-oriented interface
 * @export
 * @class CheckInApi
 * @extends {BaseAPI}
 */
export class CheckInApi extends BaseAPI {
    /**
     * チェックインする
     * @summary 
     * @param {PostCheckInRequest} postCheckInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckInApi
     */
    public checkIn(postCheckInRequest: PostCheckInRequest, options?: RawAxiosRequestConfig) {
        return CheckInApiFp(this.configuration).checkIn(postCheckInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 現在地のパーキングの情報を取得する
     * @summary 
     * @param {GetCurrentParkingRequest} getCurrentParkingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckInApi
     */
    public getCurrentParking(getCurrentParkingRequest: GetCurrentParkingRequest, options?: RawAxiosRequestConfig) {
        return CheckInApiFp(this.configuration).getCurrentParking(getCurrentParkingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パーキングにいるユーザを取得する
     * @summary 
     * @param {GetUserHereRequest} getUserHereRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckInApi
     */
    public getUserHere(getUserHereRequest: GetUserHereRequest, options?: RawAxiosRequestConfig) {
        return CheckInApiFp(this.configuration).getUserHere(getUserHereRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CloseApi - axios parameter creator
 * @export
 */
export const CloseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * パーキング道路のリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paRoadList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/close/pa-road-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 閉鎖状況を投稿する
         * @summary 
         * @param {ClosePostRequest} closePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (closePostRequest: ClosePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'closePostRequest' is not null or undefined
            assertParamExists('post', 'closePostRequest', closePostRequest)
            const localVarPath = `/api/close`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(closePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 閉鎖状況を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/close/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 閉鎖ステータスのリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/close/status-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloseApi - functional programming interface
 * @export
 */
export const CloseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloseApiAxiosParamCreator(configuration)
    return {
        /**
         * パーキング道路のリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paRoadList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParkingRoads>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paRoadList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloseApi.paRoadList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 閉鎖状況を投稿する
         * @summary 
         * @param {ClosePostRequest} closePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(closePostRequest: ClosePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Closes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(closePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloseApi.post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 閉鎖状況を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloseStatusLists>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloseApi.status']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 閉鎖ステータスのリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloseStatuses>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statusList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloseApi.statusList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloseApi - factory interface
 * @export
 */
export const CloseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloseApiFp(configuration)
    return {
        /**
         * パーキング道路のリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paRoadList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ParkingRoads>> {
            return localVarFp.paRoadList(options).then((request) => request(axios, basePath));
        },
        /**
         * 閉鎖状況を投稿する
         * @summary 
         * @param {ClosePostRequest} closePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(closePostRequest: ClosePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Closes> {
            return localVarFp.post(closePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 閉鎖状況を取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: RawAxiosRequestConfig): AxiosPromise<CloseStatusLists> {
            return localVarFp.status(options).then((request) => request(axios, basePath));
        },
        /**
         * 閉鎖ステータスのリストを取得する
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CloseStatuses>> {
            return localVarFp.statusList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloseApi - object-oriented interface
 * @export
 * @class CloseApi
 * @extends {BaseAPI}
 */
export class CloseApi extends BaseAPI {
    /**
     * パーキング道路のリストを取得する
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloseApi
     */
    public paRoadList(options?: RawAxiosRequestConfig) {
        return CloseApiFp(this.configuration).paRoadList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 閉鎖状況を投稿する
     * @summary 
     * @param {ClosePostRequest} closePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloseApi
     */
    public post(closePostRequest: ClosePostRequest, options?: RawAxiosRequestConfig) {
        return CloseApiFp(this.configuration).post(closePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 閉鎖状況を取得する
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloseApi
     */
    public status(options?: RawAxiosRequestConfig) {
        return CloseApiFp(this.configuration).status(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 閉鎖ステータスのリストを取得する
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloseApi
     */
    public statusList(options?: RawAxiosRequestConfig) {
        return CloseApiFp(this.configuration).statusList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * お問合せ
         * @summary 
         * @param {CreateContactRequest} createContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createContactRequest: CreateContactRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createContactRequest' is not null or undefined
            assertParamExists('create', 'createContactRequest', createContactRequest)
            const localVarPath = `/api/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * お問合せ
         * @summary 
         * @param {CreateContactRequest} createContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createContactRequest: CreateContactRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contacts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createContactRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * お問合せ
         * @summary 
         * @param {CreateContactRequest} createContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createContactRequest: CreateContactRequest, options?: RawAxiosRequestConfig): AxiosPromise<Contacts> {
            return localVarFp.create(createContactRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * お問合せ
     * @summary 
     * @param {CreateContactRequest} createContactRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public create(createContactRequest: CreateContactRequest, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).create(createContactRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



